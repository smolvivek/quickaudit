buildscript {
    ext {
        buildToolsVersion = "34.0.0"
        minSdkVersion = 24
        compileSdkVersion = 34
        targetSdkVersion = 34
        ndkVersion = "25.1.8937393"
        kotlinVersion = "1.8.0"
    }
    repositories {
        google()
        mavenCentral()
        maven {
            url = uri("https://www.jitpack.io")
        }
        maven {
            url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
        }
    }
    dependencies {
        classpath("com.android.tools.build:gradle:8.1.0")
        classpath("com.facebook.react:react-native-gradle-plugin")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("com.google.gms:google-services:4.4.0")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url = uri("https://www.jitpack.io")
        }
        maven {
            url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
        }
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url("$rootDir/../node_modules/react-native/android")
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }
    }
}

// Configure React Native
ext {
    buildConfig = {
        enableHermes = false
    }
    react = {
        enableHermes = false
        enableHermesManaged = false
        enableHermesDebug = false
        enableHermesRelease = false
        enableHermesCodegen = false
    }
}

tasks.register("generateAutolinking") {
    doLast {
        def autolinkInputFile = file("${rootDir}/build/generated/autolinking/autolinking.json")
        def autolinkOutputFile = file("${rootDir}/build/generated/autolinking/autolinking-output.json")
        
        if (!autolinkInputFile.exists()) {
            autolinkInputFile.parentFile.mkdirs()
            autolinkInputFile.createNewFile()
        }
        
        if (!autolinkOutputFile.exists()) {
            autolinkOutputFile.parentFile.mkdirs()
            autolinkOutputFile.createNewFile()
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateAutolinkingPackageList') {
        task.dependsOn 'generateAutolinking'
    }
}
